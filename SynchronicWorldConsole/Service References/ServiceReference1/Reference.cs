//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.34014
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SynchronicWorldConsole.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Person", Namespace="http://schemas.datacontract.org/2004/07/Models")]
    [System.SerializableAttribute()]
    public partial class Person : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NickNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NickName {
            get {
                return this.NickNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NickNameField, value) != true)) {
                    this.NickNameField = value;
                    this.RaisePropertyChanged("NickName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventType", Namespace="http://schemas.datacontract.org/2004/07/Models")]
    public enum EventType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Party = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Lunch = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Diner = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventStatus", Namespace="http://schemas.datacontract.org/2004/07/Models")]
    public enum EventStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Open = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Closed = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pending = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Event", Namespace="http://schemas.datacontract.org/2004/07/Models")]
    [System.SerializableAttribute()]
    public partial class Event : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SynchronicWorldConsole.ServiceReference1.EventStatus StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SynchronicWorldConsole.ServiceReference1.EventType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SynchronicWorldConsole.ServiceReference1.EventStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Time {
            get {
                return this.TimeField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeField, value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SynchronicWorldConsole.ServiceReference1.EventType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContributionType", Namespace="http://schemas.datacontract.org/2004/07/Models")]
    public enum ContributionType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Money = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Food = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Beverage = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Contribution", Namespace="http://schemas.datacontract.org/2004/07/Models")]
    [System.SerializableAttribute()]
    public partial class Contribution : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SynchronicWorldConsole.ServiceReference1.ContributionType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((object.ReferenceEquals(this.QuantityField, value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SynchronicWorldConsole.ServiceReference1.ContributionType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPerson", ReplyAction="http://tempuri.org/IService1/AddPersonResponse")]
        SynchronicWorldConsole.ServiceReference1.Person AddPerson(string name, string nickName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPerson", ReplyAction="http://tempuri.org/IService1/AddPersonResponse")]
        System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Person> AddPersonAsync(string name, string nickName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PersonRetrieve", ReplyAction="http://tempuri.org/IService1/PersonRetrieveResponse")]
        SynchronicWorldConsole.ServiceReference1.Person PersonRetrieve(string name, string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PersonRetrieve", ReplyAction="http://tempuri.org/IService1/PersonRetrieveResponse")]
        System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Person> PersonRetrieveAsync(string name, string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PersonUpdate", ReplyAction="http://tempuri.org/IService1/PersonUpdateResponse")]
        SynchronicWorldConsole.ServiceReference1.Person PersonUpdate(SynchronicWorldConsole.ServiceReference1.Person person, string name, string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PersonUpdate", ReplyAction="http://tempuri.org/IService1/PersonUpdateResponse")]
        System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Person> PersonUpdateAsync(SynchronicWorldConsole.ServiceReference1.Person person, string name, string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PersonDelete", ReplyAction="http://tempuri.org/IService1/PersonDeleteResponse")]
        bool PersonDelete(string name, string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PersonDelete", ReplyAction="http://tempuri.org/IService1/PersonDeleteResponse")]
        System.Threading.Tasks.Task<bool> PersonDeleteAsync(string name, string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPersons", ReplyAction="http://tempuri.org/IService1/GetAllPersonsResponse")]
        SynchronicWorldConsole.ServiceReference1.Person[] GetAllPersons();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPersons", ReplyAction="http://tempuri.org/IService1/GetAllPersonsResponse")]
        System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Person[]> GetAllPersonsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddEvent", ReplyAction="http://tempuri.org/IService1/AddEventResponse")]
        SynchronicWorldConsole.ServiceReference1.Event AddEvent(string name, string address, string description, System.DateTime date, string time, SynchronicWorldConsole.ServiceReference1.EventType type, SynchronicWorldConsole.ServiceReference1.EventStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddEvent", ReplyAction="http://tempuri.org/IService1/AddEventResponse")]
        System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Event> AddEventAsync(string name, string address, string description, System.DateTime date, string time, SynchronicWorldConsole.ServiceReference1.EventType type, SynchronicWorldConsole.ServiceReference1.EventStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EventRetrieve", ReplyAction="http://tempuri.org/IService1/EventRetrieveResponse")]
        SynchronicWorldConsole.ServiceReference1.Event EventRetrieve(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EventRetrieve", ReplyAction="http://tempuri.org/IService1/EventRetrieveResponse")]
        System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Event> EventRetrieveAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EventUpdate", ReplyAction="http://tempuri.org/IService1/EventUpdateResponse")]
        bool EventUpdate(SynchronicWorldConsole.ServiceReference1.Event evenement, string name, string address, string description, System.DateTime date, string time, SynchronicWorldConsole.ServiceReference1.EventType type, SynchronicWorldConsole.ServiceReference1.EventStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EventUpdate", ReplyAction="http://tempuri.org/IService1/EventUpdateResponse")]
        System.Threading.Tasks.Task<bool> EventUpdateAsync(SynchronicWorldConsole.ServiceReference1.Event evenement, string name, string address, string description, System.DateTime date, string time, SynchronicWorldConsole.ServiceReference1.EventType type, SynchronicWorldConsole.ServiceReference1.EventStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EventDelete", ReplyAction="http://tempuri.org/IService1/EventDeleteResponse")]
        bool EventDelete(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EventDelete", ReplyAction="http://tempuri.org/IService1/EventDeleteResponse")]
        System.Threading.Tasks.Task<bool> EventDeleteAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EventExists", ReplyAction="http://tempuri.org/IService1/EventExistsResponse")]
        bool EventExists(string name, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EventExists", ReplyAction="http://tempuri.org/IService1/EventExistsResponse")]
        System.Threading.Tasks.Task<bool> EventExistsAsync(string name, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EventDateRetrieve", ReplyAction="http://tempuri.org/IService1/EventDateRetrieveResponse")]
        SynchronicWorldConsole.ServiceReference1.Event[] EventDateRetrieve(System.DateTime date1, System.DateTime date2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EventDateRetrieve", ReplyAction="http://tempuri.org/IService1/EventDateRetrieveResponse")]
        System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Event[]> EventDateRetrieveAsync(System.DateTime date1, System.DateTime date2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EventTypeOrStatusRetrieve", ReplyAction="http://tempuri.org/IService1/EventTypeOrStatusRetrieveResponse")]
        SynchronicWorldConsole.ServiceReference1.Event[] EventTypeOrStatusRetrieve(SynchronicWorldConsole.ServiceReference1.EventType type, SynchronicWorldConsole.ServiceReference1.EventStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EventTypeOrStatusRetrieve", ReplyAction="http://tempuri.org/IService1/EventTypeOrStatusRetrieveResponse")]
        System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Event[]> EventTypeOrStatusRetrieveAsync(SynchronicWorldConsole.ServiceReference1.EventType type, SynchronicWorldConsole.ServiceReference1.EventStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EventClosedDelete", ReplyAction="http://tempuri.org/IService1/EventClosedDeleteResponse")]
        bool EventClosedDelete();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EventClosedDelete", ReplyAction="http://tempuri.org/IService1/EventClosedDeleteResponse")]
        System.Threading.Tasks.Task<bool> EventClosedDeleteAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EventPendingUpdate", ReplyAction="http://tempuri.org/IService1/EventPendingUpdateResponse")]
        bool EventPendingUpdate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EventPendingUpdate", ReplyAction="http://tempuri.org/IService1/EventPendingUpdateResponse")]
        System.Threading.Tasks.Task<bool> EventPendingUpdateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEvents", ReplyAction="http://tempuri.org/IService1/GetAllEventsResponse")]
        SynchronicWorldConsole.ServiceReference1.Event[] GetAllEvents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEvents", ReplyAction="http://tempuri.org/IService1/GetAllEventsResponse")]
        System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Event[]> GetAllEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddContribution", ReplyAction="http://tempuri.org/IService1/AddContributionResponse")]
        SynchronicWorldConsole.ServiceReference1.Contribution AddContribution(string name, int quantity, SynchronicWorldConsole.ServiceReference1.ContributionType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddContribution", ReplyAction="http://tempuri.org/IService1/AddContributionResponse")]
        System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Contribution> AddContributionAsync(string name, int quantity, SynchronicWorldConsole.ServiceReference1.ContributionType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllContributions", ReplyAction="http://tempuri.org/IService1/GetAllContributionsResponse")]
        SynchronicWorldConsole.ServiceReference1.Contribution[] GetAllContributions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllContributions", ReplyAction="http://tempuri.org/IService1/GetAllContributionsResponse")]
        System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Contribution[]> GetAllContributionsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : SynchronicWorldConsole.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<SynchronicWorldConsole.ServiceReference1.IService1>, SynchronicWorldConsole.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SynchronicWorldConsole.ServiceReference1.Person AddPerson(string name, string nickName) {
            return base.Channel.AddPerson(name, nickName);
        }
        
        public System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Person> AddPersonAsync(string name, string nickName) {
            return base.Channel.AddPersonAsync(name, nickName);
        }
        
        public SynchronicWorldConsole.ServiceReference1.Person PersonRetrieve(string name, string nickname) {
            return base.Channel.PersonRetrieve(name, nickname);
        }
        
        public System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Person> PersonRetrieveAsync(string name, string nickname) {
            return base.Channel.PersonRetrieveAsync(name, nickname);
        }
        
        public SynchronicWorldConsole.ServiceReference1.Person PersonUpdate(SynchronicWorldConsole.ServiceReference1.Person person, string name, string nickname) {
            return base.Channel.PersonUpdate(person, name, nickname);
        }
        
        public System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Person> PersonUpdateAsync(SynchronicWorldConsole.ServiceReference1.Person person, string name, string nickname) {
            return base.Channel.PersonUpdateAsync(person, name, nickname);
        }
        
        public bool PersonDelete(string name, string nickname) {
            return base.Channel.PersonDelete(name, nickname);
        }
        
        public System.Threading.Tasks.Task<bool> PersonDeleteAsync(string name, string nickname) {
            return base.Channel.PersonDeleteAsync(name, nickname);
        }
        
        public SynchronicWorldConsole.ServiceReference1.Person[] GetAllPersons() {
            return base.Channel.GetAllPersons();
        }
        
        public System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Person[]> GetAllPersonsAsync() {
            return base.Channel.GetAllPersonsAsync();
        }
        
        public SynchronicWorldConsole.ServiceReference1.Event AddEvent(string name, string address, string description, System.DateTime date, string time, SynchronicWorldConsole.ServiceReference1.EventType type, SynchronicWorldConsole.ServiceReference1.EventStatus status) {
            return base.Channel.AddEvent(name, address, description, date, time, type, status);
        }
        
        public System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Event> AddEventAsync(string name, string address, string description, System.DateTime date, string time, SynchronicWorldConsole.ServiceReference1.EventType type, SynchronicWorldConsole.ServiceReference1.EventStatus status) {
            return base.Channel.AddEventAsync(name, address, description, date, time, type, status);
        }
        
        public SynchronicWorldConsole.ServiceReference1.Event EventRetrieve(string name) {
            return base.Channel.EventRetrieve(name);
        }
        
        public System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Event> EventRetrieveAsync(string name) {
            return base.Channel.EventRetrieveAsync(name);
        }
        
        public bool EventUpdate(SynchronicWorldConsole.ServiceReference1.Event evenement, string name, string address, string description, System.DateTime date, string time, SynchronicWorldConsole.ServiceReference1.EventType type, SynchronicWorldConsole.ServiceReference1.EventStatus status) {
            return base.Channel.EventUpdate(evenement, name, address, description, date, time, type, status);
        }
        
        public System.Threading.Tasks.Task<bool> EventUpdateAsync(SynchronicWorldConsole.ServiceReference1.Event evenement, string name, string address, string description, System.DateTime date, string time, SynchronicWorldConsole.ServiceReference1.EventType type, SynchronicWorldConsole.ServiceReference1.EventStatus status) {
            return base.Channel.EventUpdateAsync(evenement, name, address, description, date, time, type, status);
        }
        
        public bool EventDelete(string name) {
            return base.Channel.EventDelete(name);
        }
        
        public System.Threading.Tasks.Task<bool> EventDeleteAsync(string name) {
            return base.Channel.EventDeleteAsync(name);
        }
        
        public bool EventExists(string name, System.DateTime date) {
            return base.Channel.EventExists(name, date);
        }
        
        public System.Threading.Tasks.Task<bool> EventExistsAsync(string name, System.DateTime date) {
            return base.Channel.EventExistsAsync(name, date);
        }
        
        public SynchronicWorldConsole.ServiceReference1.Event[] EventDateRetrieve(System.DateTime date1, System.DateTime date2) {
            return base.Channel.EventDateRetrieve(date1, date2);
        }
        
        public System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Event[]> EventDateRetrieveAsync(System.DateTime date1, System.DateTime date2) {
            return base.Channel.EventDateRetrieveAsync(date1, date2);
        }
        
        public SynchronicWorldConsole.ServiceReference1.Event[] EventTypeOrStatusRetrieve(SynchronicWorldConsole.ServiceReference1.EventType type, SynchronicWorldConsole.ServiceReference1.EventStatus status) {
            return base.Channel.EventTypeOrStatusRetrieve(type, status);
        }
        
        public System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Event[]> EventTypeOrStatusRetrieveAsync(SynchronicWorldConsole.ServiceReference1.EventType type, SynchronicWorldConsole.ServiceReference1.EventStatus status) {
            return base.Channel.EventTypeOrStatusRetrieveAsync(type, status);
        }
        
        public bool EventClosedDelete() {
            return base.Channel.EventClosedDelete();
        }
        
        public System.Threading.Tasks.Task<bool> EventClosedDeleteAsync() {
            return base.Channel.EventClosedDeleteAsync();
        }
        
        public bool EventPendingUpdate() {
            return base.Channel.EventPendingUpdate();
        }
        
        public System.Threading.Tasks.Task<bool> EventPendingUpdateAsync() {
            return base.Channel.EventPendingUpdateAsync();
        }
        
        public SynchronicWorldConsole.ServiceReference1.Event[] GetAllEvents() {
            return base.Channel.GetAllEvents();
        }
        
        public System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Event[]> GetAllEventsAsync() {
            return base.Channel.GetAllEventsAsync();
        }
        
        public SynchronicWorldConsole.ServiceReference1.Contribution AddContribution(string name, int quantity, SynchronicWorldConsole.ServiceReference1.ContributionType type) {
            return base.Channel.AddContribution(name, quantity, type);
        }
        
        public System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Contribution> AddContributionAsync(string name, int quantity, SynchronicWorldConsole.ServiceReference1.ContributionType type) {
            return base.Channel.AddContributionAsync(name, quantity, type);
        }
        
        public SynchronicWorldConsole.ServiceReference1.Contribution[] GetAllContributions() {
            return base.Channel.GetAllContributions();
        }
        
        public System.Threading.Tasks.Task<SynchronicWorldConsole.ServiceReference1.Contribution[]> GetAllContributionsAsync() {
            return base.Channel.GetAllContributionsAsync();
        }
    }
}
